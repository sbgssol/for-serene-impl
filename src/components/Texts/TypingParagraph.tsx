import { Typography } from "@material-tailwind/react";
import { useEffect, useState } from "react";
import Album from "../Page/Normal/Album";
import MeiImg1 from "../../assets/mei/01.png";
import MeiImg2 from "../../assets/mei/02.png";
import MeiImg3 from "../../assets/mei/03.png";
import MeiImg4 from "../../assets/mei/04.png";
import MeiImg5 from "../../assets/mei/05.png";
import MeiImg7 from "../../assets/mei/07.png";
import MeiImg8 from "../../assets/mei/08.png";
import MeiImg9 from "../../assets/mei/09.png";
import Img1 from "../../assets/01.png";
import Img2 from "../../assets/02.png";
import Img3 from "../../assets/03.png";
import Img4 from "../../assets/04.png";
import Img5 from "../../assets/05.png";
import Img6 from "../../assets/06.png";
import LinkImg01 from "../../assets/link01.png";
import LinkImg02 from "../../assets/link02.png";
import LinkImg03 from "../../assets/link03.png";
import LinkImg04 from "../../assets/link04.png";
import LinkImg05 from "../../assets/link05.png";

const slender = [
  {
    path: MeiImg2,
    desc: "Tay nh·ªè x√≠u n√®",
  },
  {
    path: MeiImg3,
    desc: "V·∫´n r·∫•t xinh",
  },
  {
    path: MeiImg4,
    desc: "Sao anh nh√¨n t·∫•m n√†o c≈©ng th·∫•y em g·∫ßy h·∫øt :<",
  },
  {
    path: MeiImg5,
    desc: "V√† v·∫•n r·∫•t xinh",
  },
  {
    path: MeiImg7,
    desc: "V√† ƒë√¢y n·ªØa, anh ch√¨m trong ƒë√¥i m·∫Øt ·∫•y",
  },
  {
    path: MeiImg8,
    desc: "Tay c√≥ ƒë·ªëm ƒë·ªè, c√≥ ph·∫£i b·ªã c√¥n tr√πng ƒë·ªët r·ªìi kh√¥ng üò•",
  },
  {
    path: MeiImg9,
    desc: "M·ªôt con b√°o, v√† hai con m√®o. ƒê√°ng iu th·∫≠c s·ª± ü•∞",
  },
];

const newHair = [
  {
    path: MeiImg1,
    desc: "T√≥c m·ªõi xinh l·∫Øm, anh ƒë·ªÅu ng·∫Øm b·ª©c ·∫£nh n√†y v√†o m·ªói bu·ªïi s√°ng tr∆∞·ªõc khi l√†m b·∫•t c·ª© vi·ªác g√¨. ƒê√¥i m·∫Øt c·ªßa em r·∫•t ƒë·∫πp trong b·ª©c ·∫£nh n√†y em bi·∫øt kh√¥ng?",
  },
];

const hardTime = [
  {
    path: Img1,
    desc: "Th·ªùi gian v·ª´a qua anh r·∫•t stress, c√≥ r·∫•t nhi·ªÅu ƒëi·ªÅu kh√¥ng ·ªïn t·ª´ c√¥ng vi·ªác, ƒë·∫øn vi·ªác gia ƒë√¨nh, n√≥ khi·∫øn anh ki·ªát s·ª©c, anh kh√¥ng th·ªÉ ki·ªÉm so√°t ƒë∆∞·ª£c, m·ªói khi anh kh√¥ng ·ªïn th√¨ n·ªôi ti·∫øt trong anh thay ƒë·ªïi r·∫•t nhi·ªÅu...",
  },
  {
    path: Img2,
    desc: "M·ªçi th·ª© v·ªõi anh n√≥ ƒë√£ kh√¥ng ·ªïng r·ªìi, vi·ªác thay ƒë·ªïi n·ªôi ti·∫øt nhi·ªÅu khi·∫øn anh c·∫£m th·∫•y √°p l·ª±c h∆°n, m·ªçi th·ª© n·∫∑ng n·ªÅ h∆°n v√† nghi√™m tr·ªçng h∆°n üò•",
  },
  {
    path: Img3,
    desc: "Anh ƒë√£ ph·∫£i l√†m r·∫•t nhi·ªÅu, v√† l√†m tr·ªÖ n·ªØa, h·∫ßu nh∆∞ l√† 6 ng√†y trong tu·∫ßn. ·ªû tr√™n l√† tin nh·∫Øn c·ªßa PM follow status c·ªßa anh",
  },
  {
    path: Img4,
    desc: "V√† c·∫£ ƒë√¢y n·ªØa, anh ƒë√£ l√†m ƒë·∫øn t·∫≠n...10h, bu√¥ng ra th√¨ ƒë·∫ßu √≥c v√† c∆° th·ªÉ ƒë√£ kh√¥ng c√≤n s·ª©c n·ªØa r·ªìi üò¢",
  },
  {
    path: Img5,
    desc: "...",
  },
  {
    path: Img6,
    desc: "V√† m·∫π anh c≈©ng nh·∫≠n ra anh kh√¥ng ·ªïn...",
  },
];
const links = [
  {
    path: LinkImg01,
    desc: "Anh ƒë√£ lu√¥n mang chi·∫øc b√¥ng tai n√†y, v√¨ anh tin r·∫±ng ch√≠nh n√≥ s·∫Ω gi√∫p anh c√≥ th·ªÉ ƒë·ªông l·ª±c v∆∞·ª£t qua m·ªçi kh√≥ khƒÉn. Ch√≠nh n√≥ s·∫Ω cho anh c·∫£m gi√°c lu√¥n c√≥ em ·ªü c·∫£nh anh",
  },
  {
    path: LinkImg02,
    desc: "ƒê√¢y n·ªØa",
  },
  {
    path: LinkImg03,
    desc: "V√† ƒë√¢y n·ªØa. M√† em th·∫•y ƒë√≥, da anh v·∫´n ch∆∞a th·∫≠t s·ª± ·ªïn",
  },
  {
    path: LinkImg04,
    desc: "V√† ƒë√¢y l√† t·∫•m h√¨nh anh d√πng l√∫c ƒëi l√†m üòÅ",
  },
  {
    path: LinkImg05,
    desc: "V√† l√™n b√°o tuy·ªÉn d·ª•ng c·ªßa cty ü§ó",
  },
];

export interface TypingParagraphProps {
  paragraph: string[];
  speedInMs: number;
  className?: string;
}

export default function TypingParagraph(props: TypingParagraphProps) {
  const [sentenceIndx, setSentenceIndx] = useState(0);
  const [charIdx, setCharIdx] = useState(0);
  const [content, setContent] = useState("");
  const [generated, setGenerated] = useState([""]);

  useEffect(() => {
    const id = setInterval(() => {
      if (sentenceIndx < props.paragraph.length) {
        if (charIdx < props.paragraph[sentenceIndx].length) {
          setContent(
            (prevContent) =>
              prevContent + props.paragraph[sentenceIndx][charIdx]
          );
        }

        if (charIdx < props.paragraph[sentenceIndx].length) {
          setCharIdx((prevCharIdx) => prevCharIdx + 1);
        } else {
          setGenerated([...generated, props.paragraph[sentenceIndx]]);
          setCharIdx(0);
          setSentenceIndx((idx) => idx + 1);
          setContent("");
          clearInterval(id);
        }
      }
    }, props.speedInMs);

    return () => {
      clearInterval(id);
    };
  }, [charIdx, generated, props.paragraph, props.speedInMs, sentenceIndx]);

  return (
    <>
      {generated.map((msg, index) => (
        <Typography key={index} className={`${props.className} block `}>
          {msg}
          {msg.includes("Em c·∫Øt t√≥c xinh l·∫Øm") ? (
            <Album
              title="click"
              images={newHair}
              titleClasses="text-blue-300 py-0 px-1 underline underline-offset-2"
            />
          ) : (
            ""
          )}
          {msg.includes("anh th·∫•y em g·∫ßy ƒëi h∆°n tr∆∞·ªõc nhi·ªÅu l·∫Øm r·ªìi √°") ? (
            <Album
              title="click"
              images={slender}
              titleClasses="text-blue-300 py-0 px-1 underline underline-offset-2"
            />
          ) : (
            ""
          )}
          {msg.includes("Anh ƒë√£ c√≥ m·ªôt kho·∫£n th·ªùi gian v√¥ c√πng kh√≥ khƒÉn") ? (
            <Album
              title="click"
              images={hardTime}
              titleClasses="text-blue-300 py-0 px-1 underline underline-offset-2"
            />
          ) : (
            ""
          )}
          {msg.includes("c√≥ m·ªôt m·ªëi li√™n k·∫øt ƒë·∫∑c bi·ªát") ? (
            <Album
              title="click"
              images={links}
              titleClasses="text-blue-300 py-0 px-1 underline underline-offset-2"
            />
          ) : (
            ""
          )}
        </Typography>
      ))}
      <Typography className={props.className}>{content}</Typography>
    </>
  );
}
